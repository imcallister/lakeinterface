# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/01_config.ipynb.

# %% auto 0
__all__ = ['ConfigManager']

# %% ../nbs/01_config.ipynb 2
import boto3

# %% ../nbs/01_config.ipynb 3
DEFAULT_REGION = 'us-east-1'

def get_aws_session(aws_profile=None):
    if aws_profile:
        return boto3.session.Session(profile_name=aws_profile)
    else:
        return boto3.session.Session(region_name=DEFAULT_REGION)
        


def lake_config(config_group, aws_profile=None):
    session = get_aws_session(aws_profile=aws_profile)
    ssm_client = session.client('ssm')
    
    def _get_parameter(parameter_name):
        return ssm_client.get_parameter(Name=parameter_name)['Parameter']['Value']
    
    response = ssm_client.describe_parameters(
        ParameterFilters=[
            {
                'Key': 'Path',
                'Values': [f'/{config_group}']
            }
        ]
    )

    return dict(
        (p['Name'].replace(f'/{config_group}/',''), _get_parameter(p['Name'])) 
        for p in response['Parameters']
    )


# %% ../nbs/01_config.ipynb 5
class ConfigManager:
    """
    A class to fetch required config for LakeInterface from AWS Systems Manager.
    ...

    Attributes
    ----------
    manager : boto3 session client
        AWS Systems Manager client
        
    Methods
    -------
    
    __init__(profile='default'):
        Initializes the AWS SSM session using AWS profile_name
        
    fetch_config(config_group):
        Uses manager to fetch parameters from the /config_group path in AWS SSM
    
    """
    
    def __init__(self, profile=None):
        if profile:
            session = boto3.session.Session(profile_name=profile)
        else:
            session = boto3.session.Session(region_name=DEFAULT_REGION)
            
        self.manager = session.client('ssm')

    def _get_parameter(self, config_group, parameter_name):
        return self.manager.get_parameter(Name=parameter_name)['Parameter']['Value']

    def fetch_config(self, config_group):
        response = self.manager.describe_parameters(
            ParameterFilters=[
                {
                    'Key': 'Path',
                    'Values': [
                        f'/{config_group}',
                    ]
                }
            ]
        )

        return dict((
            p['Name'].replace(f'/{config_group}/',''), 
            self._get_parameter(config_group, p['Name'])
        ) for p in response['Parameters'])

